"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = require("mongoose");

const messageSchema = new _mongoose.Schema({
  sender: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  body: {
    type: String,
    required: [true, "Сообщение не должно быть пустым"]
  },
  recipients: [{
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }],
  chatId: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Chat',
    required: true
  },
  viewedBy: [{
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }]
}, {
  timestamps: true
});

messageSchema.statics.findMessage = async function (conditions) {
  const chat = await this.findOne(conditions);
  if (!chat) throw new Error("Чат не найден");
  return chat;
};

messageSchema.methods.haveSenderAllow = function (user) {
  if (!(this.sender.toString() === user)) throw new Error("У вас нет прав для редактирования данного сообщения");
  return this;
};

const Message = (0, _mongoose.model)('Message', messageSchema);
var _default = Message;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvbWVzc2FnZS50cyJdLCJuYW1lcyI6WyJtZXNzYWdlU2NoZW1hIiwiU2NoZW1hIiwic2VuZGVyIiwidHlwZSIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJyZXF1aXJlZCIsImJvZHkiLCJTdHJpbmciLCJyZWNpcGllbnRzIiwiY2hhdElkIiwidmlld2VkQnkiLCJ0aW1lc3RhbXBzIiwic3RhdGljcyIsImZpbmRNZXNzYWdlIiwiY29uZGl0aW9ucyIsImNoYXQiLCJmaW5kT25lIiwiRXJyb3IiLCJtZXRob2RzIiwiaGF2ZVNlbmRlckFsbG93IiwidXNlciIsInRvU3RyaW5nIiwiTWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUdBLE1BQU1BLGFBQWEsR0FBRyxJQUFJQyxnQkFBSixDQUErQztBQUNqRUMsRUFBQUEsTUFBTSxFQUFFO0FBQ0pDLElBQUFBLElBQUksRUFBRUYsaUJBQU9HLEtBQVAsQ0FBYUMsUUFEZjtBQUVKQyxJQUFBQSxHQUFHLEVBQUUsTUFGRDtBQUdKQyxJQUFBQSxRQUFRLEVBQUU7QUFITixHQUR5RDtBQU1qRUMsRUFBQUEsSUFBSSxFQUFFO0FBQ0ZMLElBQUFBLElBQUksRUFBRU0sTUFESjtBQUVGRixJQUFBQSxRQUFRLEVBQUUsQ0FBQyxJQUFELEVBQU8saUNBQVA7QUFGUixHQU4yRDtBQVVqRUcsRUFBQUEsVUFBVSxFQUFFLENBQUM7QUFDVFAsSUFBQUEsSUFBSSxFQUFFRixpQkFBT0csS0FBUCxDQUFhQyxRQURWO0FBRVRDLElBQUFBLEdBQUcsRUFBRSxNQUZJO0FBR1RDLElBQUFBLFFBQVEsRUFBRTtBQUhELEdBQUQsQ0FWcUQ7QUFlakVJLEVBQUFBLE1BQU0sRUFBRTtBQUNKUixJQUFBQSxJQUFJLEVBQUVGLGlCQUFPRyxLQUFQLENBQWFDLFFBRGY7QUFFSkMsSUFBQUEsR0FBRyxFQUFFLE1BRkQ7QUFHSkMsSUFBQUEsUUFBUSxFQUFFO0FBSE4sR0FmeUQ7QUFvQmpFSyxFQUFBQSxRQUFRLEVBQUUsQ0FBQztBQUNQVCxJQUFBQSxJQUFJLEVBQUVGLGlCQUFPRyxLQUFQLENBQWFDLFFBRFo7QUFFUEMsSUFBQUEsR0FBRyxFQUFFO0FBRkUsR0FBRDtBQXBCdUQsQ0FBL0MsRUF3Qm5CO0FBQ0NPLEVBQUFBLFVBQVUsRUFBRTtBQURiLENBeEJtQixDQUF0Qjs7QUE0QkFiLGFBQWEsQ0FBQ2MsT0FBZCxDQUFzQkMsV0FBdEIsR0FBb0MsZ0JBQWdCQyxVQUFoQixFQUFvRDtBQUNwRixRQUFNQyxJQUFJLEdBQUcsTUFBTSxLQUFLQyxPQUFMLENBQWFGLFVBQWIsQ0FBbkI7QUFFQSxNQUFJLENBQUNDLElBQUwsRUFBVyxNQUFNLElBQUlFLEtBQUosQ0FBVSxlQUFWLENBQU47QUFFWCxTQUFPRixJQUFQO0FBQ0gsQ0FORDs7QUFRQWpCLGFBQWEsQ0FBQ29CLE9BQWQsQ0FBc0JDLGVBQXRCLEdBQXdDLFVBQVVDLElBQVYsRUFBd0I7QUFDNUQsTUFBSSxFQUFFLEtBQUtwQixNQUFMLENBQVlxQixRQUFaLE9BQTJCRCxJQUE3QixDQUFKLEVBQ0ksTUFBTSxJQUFJSCxLQUFKLENBQVUscURBQVYsQ0FBTjtBQUVKLFNBQU8sSUFBUDtBQUNILENBTEQ7O0FBT0EsTUFBTUssT0FBTyxHQUFHLHFCQUFxQyxTQUFyQyxFQUFnRHhCLGFBQWhELENBQWhCO2VBRWV3QixPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZW1hLCBtb2RlbCwgfSBmcm9tICdtb25nb29zZSdcclxuaW1wb3J0IHsgTWVzc2FnZURvY3VtZW50LCBNZXNzYWdlTW9kZWwgfSBmcm9tICcuLi90eXBlcydcclxuXHJcbmNvbnN0IG1lc3NhZ2VTY2hlbWEgPSBuZXcgU2NoZW1hPE1lc3NhZ2VEb2N1bWVudCwgTWVzc2FnZU1vZGVsLCBhbnk+KHtcclxuICAgIHNlbmRlcjoge1xyXG4gICAgICAgIHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuICAgICAgICByZWY6ICdVc2VyJyxcclxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICBib2R5OiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgXCLQodC+0L7QsdGJ0LXQvdC40LUg0L3QtSDQtNC+0LvQttC90L4g0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8XCJdLFxyXG4gICAgfSxcclxuICAgIHJlY2lwaWVudHM6IFt7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogJ1VzZXInLFxyXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgfV0sXHJcbiAgICBjaGF0SWQ6IHtcclxuICAgICAgICB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsXHJcbiAgICAgICAgcmVmOiAnQ2hhdCcsXHJcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICB9LFxyXG4gICAgdmlld2VkQnk6IFt7XHJcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxyXG4gICAgICAgIHJlZjogJ1VzZXInLFxyXG4gICAgfV1cclxufSwge1xyXG4gICAgdGltZXN0YW1wczogdHJ1ZSxcclxufSlcclxuXHJcbm1lc3NhZ2VTY2hlbWEuc3RhdGljcy5maW5kTWVzc2FnZSA9IGFzeW5jIGZ1bmN0aW9uIChjb25kaXRpb25zOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICBjb25zdCBjaGF0ID0gYXdhaXQgdGhpcy5maW5kT25lKGNvbmRpdGlvbnMpXHJcblxyXG4gICAgaWYgKCFjaGF0KSB0aHJvdyBuZXcgRXJyb3IoXCLQp9Cw0YIg0L3QtSDQvdCw0LnQtNC10L1cIilcclxuXHJcbiAgICByZXR1cm4gY2hhdFxyXG59XHJcblxyXG5tZXNzYWdlU2NoZW1hLm1ldGhvZHMuaGF2ZVNlbmRlckFsbG93ID0gZnVuY3Rpb24gKHVzZXI6IHN0cmluZykge1xyXG4gICAgaWYgKCEodGhpcy5zZW5kZXIudG9TdHJpbmcoKSA9PT0gdXNlcikpIFxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcItCjINCy0LDRgSDQvdC10YIg0L/RgNCw0LIg0LTQu9GPINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0LTQsNC90L3QvtCz0L4g0YHQvtC+0LHRidC10L3QuNGPXCIpXHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxufVxyXG5cclxuY29uc3QgTWVzc2FnZSA9IG1vZGVsPE1lc3NhZ2VEb2N1bWVudCwgTWVzc2FnZU1vZGVsPignTWVzc2FnZScsIG1lc3NhZ2VTY2hlbWEpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlIl19