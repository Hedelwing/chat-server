"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = require("mongoose");

var _bcrypt = require("bcrypt");

const userSchema = new _mongoose.Schema({
  nickname: {
    type: String,
    required: [true, "Обязательное поле"],
    minlength: [3, "Nickname должен содержать не менее 3-х символов"],
    maxlength: [20, "Nickname должен содержать не более 20-ти символов"]
  },
  password: {
    type: String,
    required: [true, "Обязательное поле"],
    validate: {
      validator: pass => /(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{6,}/g.test(pass),
      message: () => `Пароль должен содержать число, буквы верхнего и нижнего регистра`
    }
  },
  email: {
    type: String,
    required: [true, "Обязательное поле"],
    validate: [{
      validator: email => /.@.+\../.test(email),
      message: props => `${props.value} некорректен`
    }, {
      validator: async email => !(await User.exists({
        email
      })),
      message: () => `Email уже используется`
    }]
  },
  avatar: {
    type: String,
    default: "https://res.cloudinary.com/dlajqlyky/image/upload/v1627144864/avatar-1577909_1280_zyjtyw.png"
  },
  isOnline: {
    type: Boolean,
    default: false
  },
  // @ts-ignore 
  chats: [{
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Chat'
  }]
}, {
  timestamps: true
});
userSchema.pre('save', async function () {
  if (this.isModified('password')) this.password = await (0, _bcrypt.hash)(this.password, 10);
});

userSchema.methods.matchesPassword = function (password) {
  return (0, _bcrypt.compare)(password, this.password);
};

const User = (0, _mongoose.model)('User', userSchema);
var _default = User;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvdXNlci50cyJdLCJuYW1lcyI6WyJ1c2VyU2NoZW1hIiwiU2NoZW1hIiwibmlja25hbWUiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJtaW5sZW5ndGgiLCJtYXhsZW5ndGgiLCJwYXNzd29yZCIsInZhbGlkYXRlIiwidmFsaWRhdG9yIiwicGFzcyIsInRlc3QiLCJtZXNzYWdlIiwiZW1haWwiLCJwcm9wcyIsInZhbHVlIiwiVXNlciIsImV4aXN0cyIsImF2YXRhciIsImRlZmF1bHQiLCJpc09ubGluZSIsIkJvb2xlYW4iLCJjaGF0cyIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJ0aW1lc3RhbXBzIiwicHJlIiwiaXNNb2RpZmllZCIsIm1ldGhvZHMiLCJtYXRjaGVzUGFzc3dvcmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxVQUFVLEdBQUcsSUFBSUMsZ0JBQUosQ0FBNEQ7QUFDM0VDLEVBQUFBLFFBQVEsRUFBRTtBQUNOQyxJQUFBQSxJQUFJLEVBQUVDLE1BREE7QUFFTkMsSUFBQUEsUUFBUSxFQUFFLENBQUMsSUFBRCxFQUFPLG1CQUFQLENBRko7QUFHTkMsSUFBQUEsU0FBUyxFQUFFLENBQUMsQ0FBRCxFQUFJLGlEQUFKLENBSEw7QUFJTkMsSUFBQUEsU0FBUyxFQUFFLENBQUMsRUFBRCxFQUFLLG1EQUFMO0FBSkwsR0FEaUU7QUFPM0VDLEVBQUFBLFFBQVEsRUFBRTtBQUNOTCxJQUFBQSxJQUFJLEVBQUVDLE1BREE7QUFFTkMsSUFBQUEsUUFBUSxFQUFFLENBQUMsSUFBRCxFQUFPLG1CQUFQLENBRko7QUFHTkksSUFBQUEsUUFBUSxFQUFFO0FBQ05DLE1BQUFBLFNBQVMsRUFBR0MsSUFBRCxJQUFrQiwwQ0FBMENDLElBQTFDLENBQStDRCxJQUEvQyxDQUR2QjtBQUVORSxNQUFBQSxPQUFPLEVBQUUsTUFBTztBQUZWO0FBSEosR0FQaUU7QUFlM0VDLEVBQUFBLEtBQUssRUFBRTtBQUNIWCxJQUFBQSxJQUFJLEVBQUVDLE1BREg7QUFFSEMsSUFBQUEsUUFBUSxFQUFFLENBQUMsSUFBRCxFQUFPLG1CQUFQLENBRlA7QUFHSEksSUFBQUEsUUFBUSxFQUFFLENBQUM7QUFDUEMsTUFBQUEsU0FBUyxFQUFHSSxLQUFELElBQW1CLFVBQVVGLElBQVYsQ0FBZUUsS0FBZixDQUR2QjtBQUVQRCxNQUFBQSxPQUFPLEVBQUVFLEtBQUssSUFBSyxHQUFFQSxLQUFLLENBQUNDLEtBQU07QUFGMUIsS0FBRCxFQUdQO0FBQ0NOLE1BQUFBLFNBQVMsRUFBRSxNQUFPSSxLQUFQLElBQ1AsRUFBRSxNQUFNRyxJQUFJLENBQUNDLE1BQUwsQ0FBWTtBQUFFSixRQUFBQTtBQUFGLE9BQVosQ0FBUixDQUZMO0FBR0NELE1BQUFBLE9BQU8sRUFBRSxNQUFPO0FBSGpCLEtBSE87QUFIUCxHQWZvRTtBQTJCM0VNLEVBQUFBLE1BQU0sRUFBRTtBQUFFaEIsSUFBQUEsSUFBSSxFQUFFQyxNQUFSO0FBQWdCZ0IsSUFBQUEsT0FBTyxFQUFFO0FBQXpCLEdBM0JtRTtBQTRCM0VDLEVBQUFBLFFBQVEsRUFBRTtBQUFFbEIsSUFBQUEsSUFBSSxFQUFFbUIsT0FBUjtBQUFpQkYsSUFBQUEsT0FBTyxFQUFFO0FBQTFCLEdBNUJpRTtBQTZCM0U7QUFDQUcsRUFBQUEsS0FBSyxFQUFFLENBQUM7QUFDSnBCLElBQUFBLElBQUksRUFBRUYsaUJBQU91QixLQUFQLENBQWFDLFFBRGY7QUFFSkMsSUFBQUEsR0FBRyxFQUFFO0FBRkQsR0FBRDtBQTlCb0UsQ0FBNUQsRUFrQ2hCO0FBQ0NDLEVBQUFBLFVBQVUsRUFBRTtBQURiLENBbENnQixDQUFuQjtBQXNDQTNCLFVBQVUsQ0FBQzRCLEdBQVgsQ0FBZSxNQUFmLEVBQXVCLGtCQUFrQjtBQUNyQyxNQUFJLEtBQUtDLFVBQUwsQ0FBZ0IsVUFBaEIsQ0FBSixFQUNJLEtBQUtyQixRQUFMLEdBQWdCLE1BQU0sa0JBQUssS0FBS0EsUUFBVixFQUFvQixFQUFwQixDQUF0QjtBQUNQLENBSEQ7O0FBS0FSLFVBQVUsQ0FBQzhCLE9BQVgsQ0FBbUJDLGVBQW5CLEdBQXFDLFVBQVV2QixRQUFWLEVBQTRCO0FBQzdELFNBQU8scUJBQVFBLFFBQVIsRUFBa0IsS0FBS0EsUUFBdkIsQ0FBUDtBQUNILENBRkQ7O0FBSUEsTUFBTVMsSUFBSSxHQUFHLHFCQUF5QyxNQUF6QyxFQUFpRGpCLFVBQWpELENBQWI7ZUFFZWlCLEkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlbWEsIG1vZGVsLCBEb2N1bWVudCwgTW9kZWwgfSBmcm9tICdtb25nb29zZSdcclxuaW1wb3J0IHsgaGFzaCwgY29tcGFyZSB9IGZyb20gJ2JjcnlwdCdcclxuaW1wb3J0IHsgQ2hhdERvY3VtZW50LCBVc2VyRG9jdW1lbnQgfSBmcm9tICcuLi90eXBlcydcclxuXHJcbmNvbnN0IHVzZXJTY2hlbWEgPSBuZXcgU2NoZW1hPFVzZXJEb2N1bWVudCwgTW9kZWw8VXNlckRvY3VtZW50PiwgVXNlckRvY3VtZW50Pih7XHJcbiAgICBuaWNrbmFtZToge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogW3RydWUsIFwi0J7QsdGP0LfQsNGC0LXQu9GM0L3QvtC1INC/0L7Qu9C1XCJdLFxyXG4gICAgICAgIG1pbmxlbmd0aDogWzMsIFwiTmlja25hbWUg0LTQvtC70LbQtdC9INGB0L7QtNC10YDQttCw0YLRjCDQvdC1INC80LXQvdC10LUgMy3RhSDRgdC40LzQstC+0LvQvtCyXCJdLFxyXG4gICAgICAgIG1heGxlbmd0aDogWzIwLCBcIk5pY2tuYW1lINC00L7Qu9C20LXQvSDRgdC+0LTQtdGA0LbQsNGC0Ywg0L3QtSDQsdC+0LvQtdC1IDIwLdGC0Lgg0YHQuNC80LLQvtC70L7QslwiXVxyXG4gICAgfSxcclxuICAgIHBhc3N3b3JkOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgXCLQntCx0Y/Qt9Cw0YLQtdC70YzQvdC+0LUg0L/QvtC70LVcIl0sXHJcbiAgICAgICAgdmFsaWRhdGU6IHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiAocGFzczogc3RyaW5nKSA9PiAvKD89LipbMC05XSkoPz0uKlthLXpdKSg/PS4qW0EtWl0pLns2LH0vZy50ZXN0KHBhc3MpLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAoKSA9PiBg0J/QsNGA0L7Qu9GMINC00L7Qu9C20LXQvSDRgdC+0LTQtdGA0LbQsNGC0Ywg0YfQuNGB0LvQviwg0LHRg9C60LLRiyDQstC10YDRhdC90LXQs9C+INC4INC90LjQttC90LXQs9C+INGA0LXQs9C40YHRgtGA0LBgXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGVtYWlsOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgXCLQntCx0Y/Qt9Cw0YLQtdC70YzQvdC+0LUg0L/QvtC70LVcIl0sXHJcbiAgICAgICAgdmFsaWRhdGU6IFt7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvcjogKGVtYWlsOiBzdHJpbmcpID0+IC8uQC4rXFwuLi8udGVzdChlbWFpbCksXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IHByb3BzID0+IGAke3Byb3BzLnZhbHVlfSDQvdC10LrQvtGA0YDQtdC60YLQtdC9YFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiBhc3luYyAoZW1haWw6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT5cclxuICAgICAgICAgICAgICAgICEoYXdhaXQgVXNlci5leGlzdHMoeyBlbWFpbCB9KSksXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICgpID0+IGBFbWFpbCDRg9C20LUg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPYFxyXG4gICAgICAgIH1dXHJcbiAgICB9LFxyXG4gICAgYXZhdGFyOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogXCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kbGFqcWx5a3kvaW1hZ2UvdXBsb2FkL3YxNjI3MTQ0ODY0L2F2YXRhci0xNTc3OTA5XzEyODBfenlqdHl3LnBuZ1wiIH0sXHJcbiAgICBpc09ubGluZTogeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSB9LFxyXG4gICAgLy8gQHRzLWlnbm9yZSBcclxuICAgIGNoYXRzOiBbe1xyXG4gICAgICAgIHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcclxuICAgICAgICByZWY6ICdDaGF0J1xyXG4gICAgfV1cclxufSwge1xyXG4gICAgdGltZXN0YW1wczogdHJ1ZSxcclxufSlcclxuXHJcbnVzZXJTY2hlbWEucHJlKCdzYXZlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMuaXNNb2RpZmllZCgncGFzc3dvcmQnKSlcclxuICAgICAgICB0aGlzLnBhc3N3b3JkID0gYXdhaXQgaGFzaCh0aGlzLnBhc3N3b3JkLCAxMClcclxufSlcclxuXHJcbnVzZXJTY2hlbWEubWV0aG9kcy5tYXRjaGVzUGFzc3dvcmQgPSBmdW5jdGlvbiAocGFzc3dvcmQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGNvbXBhcmUocGFzc3dvcmQsIHRoaXMucGFzc3dvcmQpXHJcbn1cclxuXHJcbmNvbnN0IFVzZXIgPSBtb2RlbDxVc2VyRG9jdW1lbnQsIE1vZGVsPFVzZXJEb2N1bWVudD4+KCdVc2VyJywgdXNlclNjaGVtYSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFVzZXIiXX0=