"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _models = require("../models");

var _apolloServerExpress = require("apollo-server-express");

var _graphqlSubscriptions = require("graphql-subscriptions");

const pubsub = new _apolloServerExpress.PubSub();
const MESSAGE_SUBSCRIPTIONS = {
  ADD: 'MESSAGE_ADDED',
  UPDATE: 'MESSAGE_UPDATED',
  DELETE: 'MESSAGE_DELETED'
};
const MessageResolve = {
  Query: {
    getMessages: async (root, {
      chatId,
      limit,
      fromMessage
    }, {
      user
    }) => {
      const chat = (await _models.Chat.findChat({
        _id: chatId
      })).userInMembers(user);

      const getOffset = async () => {
        const messages = await _models.Message.find({
          chatId
        }).sort({
          createdAt: -1
        });
        const idx = messages.findIndex(message => message._id.toString() === fromMessage);
        if (idx === -1) throw new _apolloServerExpress.ApolloError("");
        return idx + 1;
      };

      const offset = fromMessage ? await getOffset() : 0;
      const messages = await _models.Message.find({
        chatId
      }).sort({
        createdAt: -1
      }).limit(limit).skip(offset);
      return messages.sort((a, b) => Number(a.createdAt) - Number(b.createdAt));
    }
  },
  Mutation: {
    sendMessage: async (root, args, {
      user
    }) => {
      const message = await _models.Message.create({ ...args,
        sender: user,
        viewedBy: [user]
      });
      pubsub.publish(MESSAGE_SUBSCRIPTIONS.ADD, {
        type: 'ADD',
        message
      });
      return message;
    },
    deleteMessage: async (root, {
      id
    }, {
      user
    }) => {
      const message = (await _models.Message.findMessage({
        _id: id
      })).haveSenderAllow(user);
      await _models.Message.deleteOne({
        _id: id
      });
      pubsub.publish(MESSAGE_SUBSCRIPTIONS.DELETE, {
        type: 'DELETE',
        message
      });
      return message;
    },
    updateMessage: async (root, {
      id,
      body
    }, {
      user
    }) => {
      const message = (await _models.Message.findMessage({
        _id: id
      })).haveSenderAllow(user);
      const updatedMessage = await _models.Message.findByIdAndUpdate(id, {
        body
      }, {
        new: true
      });
      pubsub.publish(MESSAGE_SUBSCRIPTIONS.UPDATE, {
        type: 'UPDATE',
        message
      });
      return updatedMessage;
    },
    markAsRead: async (root, {
      messageId
    }, {
      user
    }) => {
      await _models.Message.updateOne({
        _id: messageId
      }, {
        $push: {
          viewedBy: user
        }
      });
      return true;
    }
  },
  Message: {
    sender: async message => (await message.populate('sender').execPopulate()).sender,
    isViewed: ({
      viewedBy
    }, _, {
      user
    }) => viewedBy.includes(user)
  },
  Subscription: {
    messageObserver: {
      resolve: payload => payload,
      subscribe: (0, _graphqlSubscriptions.withFilter)((root, {
        types
      }) => {
        const subscriptions = types.map(type => MESSAGE_SUBSCRIPTIONS[type]);
        return pubsub.asyncIterator(subscriptions);
      }, async ({
        message
      }, _, {
        user
      }) => {
        const {
          members
        } = await _models.Chat.findChat({
          _id: message.chatId
        });
        const isMember = members.some(member => member.toString() === user);
        const {
          sender
        } = await message.populate('sender').execPopulate();
        const notSender = sender.id.toString() !== user;
        return isMember && notSender;
      })
    }
  }
};
var _default = MessageResolve;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,