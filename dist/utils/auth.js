"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateAccessToken = validateAccessToken;
exports.validateToken = validateToken;
exports.setTokens = exports.ensureSignedOut = exports.ensureSignedIn = exports.signIn = void 0;

var _apolloServerExpress = require("apollo-server-express");

var _models = require("../models");

var _jsonwebtoken = require("jsonwebtoken");

const signIn = async ({
  email,
  password
}) => {
  const message = 'Неверный email или пароль';
  const user = await _models.User.findOne({
    email: RegExp(email, 'i')
  });

  if (!user || !(await user.matchesPassword(password))) {
    throw new _apolloServerExpress.AuthenticationError(message);
  }

  return user;
};

exports.signIn = signIn;

const ensureSignedIn = userId => {
  if (!userId) {
    throw new _apolloServerExpress.AuthenticationError('Вы должны быть авторизованы');
  }
};

exports.ensureSignedIn = ensureSignedIn;

const ensureSignedOut = userId => {
  if (userId) {
    throw new _apolloServerExpress.AuthenticationError('Вы уже авторизованы');
  }
};

exports.ensureSignedOut = ensureSignedOut;
const secret = process.env.SECRET_TOKEN || "secret";

function validateAccessToken(token) {
  try {
    return (0, _jsonwebtoken.verify)(token, secret);
  } catch {
    return null;
  }
}

const setTokens = id => (0, _jsonwebtoken.sign)({
  id
}, secret, {
  expiresIn: '1d'
});

exports.setTokens = setTokens;

async function validateToken(accessToken) {
  const user = accessToken && validateAccessToken(accessToken);
  return user && user.id && (await _models.User.findById(user.id)) ? user.id : null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hdXRoLnRzIl0sIm5hbWVzIjpbInNpZ25JbiIsImVtYWlsIiwicGFzc3dvcmQiLCJtZXNzYWdlIiwidXNlciIsIlVzZXIiLCJmaW5kT25lIiwiUmVnRXhwIiwibWF0Y2hlc1Bhc3N3b3JkIiwiQXV0aGVudGljYXRpb25FcnJvciIsImVuc3VyZVNpZ25lZEluIiwidXNlcklkIiwiZW5zdXJlU2lnbmVkT3V0Iiwic2VjcmV0IiwicHJvY2VzcyIsImVudiIsIlNFQ1JFVF9UT0tFTiIsInZhbGlkYXRlQWNjZXNzVG9rZW4iLCJ0b2tlbiIsInNldFRva2VucyIsImlkIiwiZXhwaXJlc0luIiwidmFsaWRhdGVUb2tlbiIsImFjY2Vzc1Rva2VuIiwiZmluZEJ5SWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQU1PLE1BQU1BLE1BQU0sR0FBRyxPQUFPO0FBQUVDLEVBQUFBLEtBQUY7QUFBU0MsRUFBQUE7QUFBVCxDQUFQLEtBQW9FO0FBQ3hGLFFBQU1DLE9BQU8sR0FBRywyQkFBaEI7QUFFQSxRQUFNQyxJQUFJLEdBQUcsTUFBTUMsYUFBS0MsT0FBTCxDQUFhO0FBQUVMLElBQUFBLEtBQUssRUFBRU0sTUFBTSxDQUFDTixLQUFELEVBQVEsR0FBUjtBQUFmLEdBQWIsQ0FBbkI7O0FBRUEsTUFBSSxDQUFDRyxJQUFELElBQVMsRUFBQyxNQUFNQSxJQUFJLENBQUNJLGVBQUwsQ0FBcUJOLFFBQXJCLENBQVAsQ0FBYixFQUFvRDtBQUNsRCxVQUFNLElBQUlPLHdDQUFKLENBQXdCTixPQUF4QixDQUFOO0FBQ0Q7O0FBRUQsU0FBT0MsSUFBUDtBQUNELENBVk07Ozs7QUFhQSxNQUFNTSxjQUFjLEdBQUlDLE1BQUQsSUFBb0I7QUFDaEQsTUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDWCxVQUFNLElBQUlGLHdDQUFKLENBQXdCLDZCQUF4QixDQUFOO0FBQ0Q7QUFDRixDQUpNOzs7O0FBTUEsTUFBTUcsZUFBZSxHQUFJRCxNQUFELElBQW9CO0FBQ2pELE1BQUlBLE1BQUosRUFBWTtBQUNWLFVBQU0sSUFBSUYsd0NBQUosQ0FBd0IscUJBQXhCLENBQU47QUFDRDtBQUNGLENBSk07OztBQU1QLE1BQU1JLE1BQU0sR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFlBQVosSUFBNEIsUUFBM0M7O0FBRU8sU0FBU0MsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQWdFO0FBQ3JFLE1BQUk7QUFDRixXQUFPLDBCQUFPQSxLQUFQLEVBQWNMLE1BQWQsQ0FBUDtBQUNELEdBRkQsQ0FFRSxNQUFNO0FBQ04sV0FBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFFTSxNQUFNTSxTQUFTLEdBQUlDLEVBQUQsSUFDdkIsd0JBQUs7QUFBRUEsRUFBQUE7QUFBRixDQUFMLEVBQWFQLE1BQWIsRUFBcUI7QUFBRVEsRUFBQUEsU0FBUyxFQUFFO0FBQWIsQ0FBckIsQ0FESzs7OztBQUdBLGVBQWVDLGFBQWYsQ0FBNkJDLFdBQTdCLEVBQTBFO0FBQy9FLFFBQU1uQixJQUFJLEdBQUdtQixXQUFXLElBQUlOLG1CQUFtQixDQUFDTSxXQUFELENBQS9DO0FBRUEsU0FBT25CLElBQUksSUFBSUEsSUFBSSxDQUFDZ0IsRUFBYixLQUFtQixNQUFNZixhQUFLbUIsUUFBTCxDQUFjcEIsSUFBSSxDQUFDZ0IsRUFBbkIsQ0FBekIsSUFBa0RoQixJQUFJLENBQUNnQixFQUF2RCxHQUE0RCxJQUFuRTtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXV0aGVudGljYXRpb25FcnJvciB9IGZyb20gJ2Fwb2xsby1zZXJ2ZXItZXhwcmVzcydcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL21vZGVscydcclxuaW1wb3J0IHsgc2lnbiwgdmVyaWZ5LCBKd3RQYXlsb2FkIH0gZnJvbSBcImpzb253ZWJ0b2tlblwiXHJcblxyXG5pbnRlcmZhY2UgVXNlclBheWxvYWQgZXh0ZW5kcyBKd3RQYXlsb2FkIHtcclxuICBpZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2lnbkluID0gYXN5bmMgKHsgZW1haWwsIHBhc3N3b3JkIH06IHsgZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyB9KSA9PiB7XHJcbiAgY29uc3QgbWVzc2FnZSA9ICfQndC10LLQtdGA0L3Ri9C5IGVtYWlsINC40LvQuCDQv9Cw0YDQvtC70YwnXHJcblxyXG4gIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoeyBlbWFpbDogUmVnRXhwKGVtYWlsLCAnaScpIH0pXHJcblxyXG4gIGlmICghdXNlciB8fCAhYXdhaXQgdXNlci5tYXRjaGVzUGFzc3dvcmQocGFzc3dvcmQpKSB7XHJcbiAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FcnJvcihtZXNzYWdlKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHVzZXJcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBlbnN1cmVTaWduZWRJbiA9ICh1c2VySWQ6IHN0cmluZykgPT4ge1xyXG4gIGlmICghdXNlcklkKSB7XHJcbiAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FcnJvcign0JLRiyDQtNC+0LvQttC90Ysg0LHRi9GC0Ywg0LDQstGC0L7RgNC40LfQvtCy0LDQvdGLJylcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBlbnN1cmVTaWduZWRPdXQgPSAodXNlcklkOiBzdHJpbmcpID0+IHtcclxuICBpZiAodXNlcklkKSB7XHJcbiAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FcnJvcign0JLRiyDRg9C20LUg0LDQstGC0L7RgNC40LfQvtCy0LDQvdGLJylcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHNlY3JldCA9IHByb2Nlc3MuZW52LlNFQ1JFVF9UT0tFTiB8fCBcInNlY3JldFwiXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBY2Nlc3NUb2tlbih0b2tlbjogc3RyaW5nKTogVXNlclBheWxvYWQgfCBudWxsIHtcclxuICB0cnkge1xyXG4gICAgcmV0dXJuIHZlcmlmeSh0b2tlbiwgc2VjcmV0KSBhcyBVc2VyUGF5bG9hZDtcclxuICB9IGNhdGNoIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNldFRva2VucyA9IChpZDogc3RyaW5nKSA9PlxyXG4gIHNpZ24oeyBpZCB9LCBzZWNyZXQsIHsgZXhwaXJlc0luOiAnMWQnIH0pXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVUb2tlbihhY2Nlc3NUb2tlbjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XHJcbiAgY29uc3QgdXNlciA9IGFjY2Vzc1Rva2VuICYmIHZhbGlkYXRlQWNjZXNzVG9rZW4oYWNjZXNzVG9rZW4pXHJcblxyXG4gIHJldHVybiB1c2VyICYmIHVzZXIuaWQgJiYgYXdhaXQgVXNlci5maW5kQnlJZCh1c2VyLmlkKSA/IHVzZXIuaWQgOiBudWxsXHJcbn0iXX0=